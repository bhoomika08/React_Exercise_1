{"ast":null,"code":"var _jsxFileName = \"/Users/vinsol/Documents/React_Exercises/React_Exercise_1/src/pomodoro_clock.js\";\nimport React from 'react';\nconst pomodoroData = {\n  pomodoroText: \"Pomodoro\",\n  shortBreakText: \"Short Break\",\n  longBreakText: \"Long Break\"\n};\n\nfunction Button(props) {\n  return React.createElement(\"li\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => props.onClick(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, props.buttonText));\n}\n\nclass TimerOption extends React.Component {\n  renderButton(buttonText) {\n    return React.createElement(Button, {\n      buttonText: buttonText,\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"links\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, this.renderButton(this.props.pomodoroData.pomodoroText), this.renderButton(this.props.pomodoroData.shortBreakText), this.renderButton(this.props.pomodoroData.longBreakText)));\n  }\n\n}\n\nfunction Countdown(props) {\n  return React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, props.time);\n}\n\n;\n\nfunction Reset(props) {\n  return React.createElement(\"button\", {\n    onClick: props.onClickReset,\n    className: \"btn reset\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Reset\");\n}\n\n;\n\nclass Control extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onClickHandler = () => {\n      if (this.props.paused) {\n        this.props.start();\n      } else {\n        this.props.stop();\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"button\", {\n      className: this.props.paused ? \"btn paused\" : \"btn play\",\n      onClick: this.onClickHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, this.props.paused ? \"play\" : \"pause\");\n  }\n\n}\n\nclass PomodoroClock extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.tick = () => {\n      if (!this.state.timer) {\n        clearInterval(this.interval);\n      } else {\n        this.setState({\n          timer: this.state.timer - 1\n        });\n      }\n    };\n\n    this.startTimer = () => {\n      this.interval = setInterval(this.tick, 1000);\n      this.setState({\n        paused: false\n      });\n    };\n\n    this.stopTimer = () => {\n      clearInterval(this.interval);\n      this.setState({\n        paused: true\n      });\n    };\n\n    this.reset = () => {\n      this.setState({\n        timer: `${this.state.startTime}`,\n        paused: true\n      });\n      clearInterval(this.interval);\n    };\n\n    this.state = {\n      timer: '',\n      pomodoroTime: 25,\n      shortBreak: 5,\n      longBreak: 10,\n      paused: true\n    };\n    this.tick = this.tick.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  handleClick() {\n    this.setState({\n      pomodoroTime: 10\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"timerContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(TimerOption, {\n      pomodoroData: pomodoroData,\n      onClick: () => this.handleClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(Countdown, {\n      time: this.state.timer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(Control, {\n      paused: this.state.paused,\n      start: this.startTimer,\n      stop: this.stopTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(Reset, {\n      onClickReset: this.reset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }));\n  }\n\n} // class PomodoroClock extends React.Component {\n//   constructor() {\n//       super();\n//       this.setVisibleComponent = this.setVisibleComponent.bind(this);\n//       this.startCounter = this.startCounter.bind(this);\n//       this.stopCounter = this.stopCounter.bind(this);\n//       this.resetCurrentCounter = this.resetCurrentCounter.bind(this);\n//       this.decreaseCounterValue = this.decreaseCounterValue.bind(this);\n//       this.modifyCounterInitValue = this.modifyCounterInitValue.bind(this);\n//       this.state = {\n//           visibleComponent: 'front',\n//           counters: {\n//               pomodoro: {\n//                   initValue: 1500,\n//                   name: 'pomodoro duration'\n//               },\n//               shortBreak: {\n//                   initValue: 300,\n//                   name: 'short break duration'\n//               },\n//               longBreak: {\n//                   initValue: 900,\n//                   name: 'long break duration'\n//               }\n//           },\n//           currentCounter: '',\n//           currentCounterInitValue: 0,\n//           currentCounterValue: 0,\n//           pomodorosPassed: 0,\n//           intervalId: {},\n//           isCountingDown: false\n//       };\n//   }\n//   componentWillMount() {\n//       const intervalId = setInterval(this.decreaseCounterValue, 1000);\n//       const firstCounter = Object.keys(this.state.counters)[0];\n//       this.setState({\n//           intervalId: intervalId,\n//           currentCounter: firstCounter,\n//           currentCounterValue: this.state.counters[firstCounter].initValue,\n//           currentCounterInitValue: this.state.counters[firstCounter].initValue\n//       });\n//   }\n//   componentWillUnmount() {\n//       clearInterval(this.state.intervalId);\n//   }\n//   setVisibleComponent(component) {\n//       this.setState({visibleComponent:component});\n//   }\n//   decreaseCounterValue() {\n//       if(this.state.isCountingDown) {\n//           let counterValue = this.state.currentCounterValue;\n//           if(counterValue > 0) {\n//               this.setState({currentCounterValue: counterValue - 1});\n//           } else {\n//               this.stopCounter();\n//               this.setCyclesPassed();\n//               this.setNextCounter();\n//           }\n//       }\n//   }\n//   modifyCounterInitValue(name, value) {\n//       let counters = {...this.state.counters};\n//       counters[name].initValue += value;\n//       this.setState({counters});\n//   }\n//   startCounter() {\n//       this.setState({isCountingDown:true});\n//   }\n//   stopCounter() {\n//       this.setState({isCountingDown:false});\n//   }\n//   resetCurrentCounter() {\n//       this.setState({\n//           isCountingDown:false,\n//           currentCounterValue: this.state.counters[this.state.currentCounter].initValue,\n//           currentCounterInitValue: this.state.counters[this.state.currentCounter].initValue\n//       });\n//   }\n//   setNextCounter() {\n//       let nextCounter = '';\n//       if(this.state.currentCounter === 'pomodoro') {\n//           nextCounter = this.state.pomodorosPassed % 4 === 0 ? 'longBreak' : 'shortBreak';\n//       } else {\n//           nextCounter = 'pomodoro';\n//       }\n//       this.setState({\n//           currentCounter:nextCounter,\n//           currentCounterValue: this.state.counters[nextCounter].initValue,\n//           currentCounterInitValue: this.state.counters[nextCounter].initValue\n//       });\n//   }\n//   setCyclesPassed() {\n//       let pomodorosPassed = this.state.pomodorosPassed;\n//       if(this.state.currentCounter === 'pomodoro') {\n//           pomodorosPassed++;\n//           this.setState({pomodorosPassed: pomodorosPassed});\n//       }\n//   }\n//   render() {\n//       return(\n//           <div>\n//               <Front\n//                   is_visible={this.state.visibleComponent === 'front'}\n//                   setVisibleComponent={this.setVisibleComponent}\n//                   counterValue={this.state.currentCounterValue}\n//                   counterInitValue={this.state.currentCounterInitValue}\n//                   startCounter={this.startCounter}\n//                   resetCurrentCounter={this.resetCurrentCounter}\n//                   stopCounter={this.stopCounter}\n//                   isCountingDown={this.state.isCountingDown}\n//               />\n//               <Back\n//                   is_visible={this.state.visibleComponent === 'back'}\n//                   setVisibleComponent={this.setVisibleComponent}\n//                   counters={this.state.counters}\n//                   modifyCounterInitValue={this.modifyCounterInitValue}\n//               />\n//           </div>\n//       );\n//   }\n// }\n// class Back extends React.Component {\n//   renderSettingsElement(name, element) {\n//       return(\n//           <div className=\"settings-element\" key={name}>\n//               <h5>{element.name}</h5>\n//               <div>\n//                   <a href=\"#\"\n//                      className=\"setting-modify modify-up\"\n//                      onClick={() => this.props.modifyCounterInitValue(name, 60)}\n//                   >\n//                       &nbsp;\n//                   </a>\n//                   <span className=\"setting-value\">{formatTime(element.initValue)}</span>\n//                   <a href=\"#\"\n//                      className=\"setting-modify modify-down\"\n//                      onClick={() => this.props.modifyCounterInitValue(name, -60)}\n//                   >\n//                       &nbsp;\n//                   </a>\n//               </div>\n//           </div>\n//       );\n//   }\n//   render() {\n//       return(\n//           <div id=\"app-back\" className={this.props.is_visible ? 'active' : ''}>\n//               <span id=\"go-to-main-screen\" onClick={() => this.props.setVisibleComponent('front')}>&lt; back</span>\n//               <div id=\"settings-container\">\n//                   {Object.keys(this.props.counters).map((x) => {\n//                       return this.renderSettingsElement(x, this.props.counters[x]);\n//                   })}\n//               </div>\n//           </div>\n//       );\n//   }\n// }\n// class Front extends React.Component {\n//   render() {\n//       const degs = parseFloat(180 - (((this.props.counterValue * 100) / this.props.counterInitValue) * 180) / 100, 2);\n//       const fillStyles = {\n//           transform: `rotate(${degs}deg)`\n//       };\n//       const fixStyles = {\n//           transform: `rotate(${degs * 2}deg)`\n//       };\n//       return(\n//           <div id=\"app-front\" className={this.props.is_visible ? 'active' : ''}>\n//               <span id=\"go-to-settings\" onClick={() => this.props.setVisibleComponent('back')} className=\"fa fa-cog\">&nbsp;</span>\n//               <button id=\"start-stop\"\n//                       className=\"btn\"\n//                       onClick={() => this.props.isCountingDown ? this.props.stopCounter() : this.props.startCounter()}\n//               >\n//                   {this.props.isCountingDown ? 'pause' : 'start'}\n//               </button>\n//               <button id=\"reset\"\n//                       className=\"btn\"\n//                       onClick={() => this.props.resetCurrentCounter()}\n//               >\n//                   reset\n//               </button>\n//               <div id=\"main-counter\" className=\"radial-progress\">\n//                   <div className=\"circle\">\n//                       <div className=\"mask full\" style={fillStyles}>\n//                           <div className=\"fill\" style={fillStyles}>&nbsp;</div>\n//                       </div>\n//                       <div className=\"mask half\">\n//                           <div className=\"fill\" style={fillStyles}>&nbsp;</div>\n//                           <div className=\"fill fix\" style={fixStyles}>&nbsp;</div>\n//                       </div>\n//                       <div className=\"inset\">&nbsp;</div>\n//                       <div className=\"counter\">{formatTime(this.props.counterValue)}</div>\n//                   </div>\n//               </div>\n//           </div>\n//       );\n//   }\n// }\n// function formatTime(t) {\n//   let minutes = parseInt(t / 60, 0);\n//   let seconds = t % 60;\n//   seconds =  seconds < 10 ? '0' + seconds : seconds;\n//   minutes =  minutes < 10 ? '0' + minutes : minutes;\n//   return `${minutes}:${seconds}`;\n// }\n\n\nexport default PomodoroClock;","map":{"version":3,"sources":["/Users/vinsol/Documents/React_Exercises/React_Exercise_1/src/pomodoro_clock.js"],"names":["React","pomodoroData","pomodoroText","shortBreakText","longBreakText","Button","props","onClick","buttonText","TimerOption","Component","renderButton","render","Countdown","time","Reset","onClickReset","Control","onClickHandler","paused","start","stop","PomodoroClock","constructor","tick","state","timer","clearInterval","interval","setState","startTimer","setInterval","stopTimer","reset","startTime","pomodoroTime","shortBreak","longBreak","bind","handleClick"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst pomodoroData = {\n  pomodoroText: \"Pomodoro\",\n  shortBreakText: \"Short Break\",\n  longBreakText: \"Long Break\",\n}\n\nfunction Button(props) {\n  return (\n    <li className=\"list\">\n      <button onClick={() => props.onClick()}>{props.buttonText}</button>\n    </li>\n  );\n}\n\nclass TimerOption extends React.Component {\n  renderButton(buttonText) {\n   return <Button \n    buttonText={buttonText}\n    onClick={ () => this.props.onClick() }/>\n  }\n  render() {\n    return (\n      <div>\n        <ul className=\"links\">\n          {this.renderButton(this.props.pomodoroData.pomodoroText)}\n          {this.renderButton(this.props.pomodoroData.shortBreakText)}\n          {this.renderButton(this.props.pomodoroData.longBreakText)}\n        </ul>\n      </div>\n    );\n  }\n}\n\nfunction Countdown(props) {\n\treturn (\n\t\t<h1>\n\t\t\t{props.time}\n\t\t</h1>\n\t);\n};\n\nfunction Reset(props) {\n\treturn (\n\t\t<button onClick={props.onClickReset} className=\"btn reset\">\n\t\t\tReset\n\t\t</button>\n\t);\n};\n\nclass Control extends React.Component {\n  onClickHandler = () => {\n    if(this.props.paused){\n      this.props.start();\n    }\n    else{\n      this.props.stop();\n    }\n  }\n\trender() {\n\t\treturn (\n\t\t\t\t<button className={this.props.paused ? \"btn paused\" : \"btn play\"} onClick={this.onClickHandler}>\n\t\t    \t{this.props.paused ? \"play\" : \"pause\"}\n\t\t    </button>\n\t\t);\n\t}\n}\n\nclass PomodoroClock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timer: '',\n      pomodoroTime: 25, \n      shortBreak: 5,\n      longBreak: 10,\n      paused: true,\n    };\n    this.tick = this.tick.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  \n  handleClick() {\n    this.setState({\n      pomodoroTime: 10,\n    })\n  }\n\n  tick = () => {\n    if(!this.state.timer) {\n      clearInterval( this.interval)\n    } else {\n      this.setState({ timer: this.state.timer - 1 });\n    }\n  }\n  \n\tstartTimer = () => {\n\t\tthis.interval = setInterval(this.tick,1000);\n    this.setState({ paused: false });\n\t}\n  \n  stopTimer = () => {\n  \tclearInterval( this.interval );\n    this.setState({ paused: true });\n\t}\n  \n  reset = () => {\n  \tthis.setState({ timer: `${this.state.startTime}`, paused: true });\n    clearInterval( this.interval );\n  }\n  render() {\n    return (\n      <div className=\"timerContainer\">\n        <TimerOption pomodoroData={pomodoroData} onClick={() => this.handleClick()}/>\n        <Countdown time={this.state.timer} />\n        <Control\n          paused={this.state.paused} \n          start={this.startTimer} \n          stop={this.stopTimer} \n        />\n        <Reset onClickReset={this.reset}/> \n      </div>\n    );\n  }\n}\n\n// class PomodoroClock extends React.Component {\n//   constructor() {\n//       super();\n//       this.setVisibleComponent = this.setVisibleComponent.bind(this);\n//       this.startCounter = this.startCounter.bind(this);\n//       this.stopCounter = this.stopCounter.bind(this);\n//       this.resetCurrentCounter = this.resetCurrentCounter.bind(this);\n//       this.decreaseCounterValue = this.decreaseCounterValue.bind(this);\n//       this.modifyCounterInitValue = this.modifyCounterInitValue.bind(this);\n//       this.state = {\n//           visibleComponent: 'front',\n//           counters: {\n//               pomodoro: {\n//                   initValue: 1500,\n//                   name: 'pomodoro duration'\n//               },\n//               shortBreak: {\n//                   initValue: 300,\n//                   name: 'short break duration'\n//               },\n//               longBreak: {\n//                   initValue: 900,\n//                   name: 'long break duration'\n//               }\n//           },\n//           currentCounter: '',\n//           currentCounterInitValue: 0,\n//           currentCounterValue: 0,\n//           pomodorosPassed: 0,\n//           intervalId: {},\n//           isCountingDown: false\n//       };\n//   }\n\n//   componentWillMount() {\n//       const intervalId = setInterval(this.decreaseCounterValue, 1000);\n//       const firstCounter = Object.keys(this.state.counters)[0];\n//       this.setState({\n//           intervalId: intervalId,\n//           currentCounter: firstCounter,\n//           currentCounterValue: this.state.counters[firstCounter].initValue,\n//           currentCounterInitValue: this.state.counters[firstCounter].initValue\n//       });\n//   }\n\n//   componentWillUnmount() {\n//       clearInterval(this.state.intervalId);\n//   }\n\n//   setVisibleComponent(component) {\n//       this.setState({visibleComponent:component});\n//   }\n\n//   decreaseCounterValue() {\n//       if(this.state.isCountingDown) {\n//           let counterValue = this.state.currentCounterValue;\n//           if(counterValue > 0) {\n//               this.setState({currentCounterValue: counterValue - 1});\n//           } else {\n//               this.stopCounter();\n//               this.setCyclesPassed();\n//               this.setNextCounter();\n//           }\n//       }\n//   }\n\n//   modifyCounterInitValue(name, value) {\n//       let counters = {...this.state.counters};\n//       counters[name].initValue += value;\n//       this.setState({counters});\n//   }\n\n//   startCounter() {\n//       this.setState({isCountingDown:true});\n//   }\n\n//   stopCounter() {\n//       this.setState({isCountingDown:false});\n//   }\n\n//   resetCurrentCounter() {\n//       this.setState({\n//           isCountingDown:false,\n//           currentCounterValue: this.state.counters[this.state.currentCounter].initValue,\n//           currentCounterInitValue: this.state.counters[this.state.currentCounter].initValue\n//       });\n//   }\n\n//   setNextCounter() {\n//       let nextCounter = '';\n//       if(this.state.currentCounter === 'pomodoro') {\n//           nextCounter = this.state.pomodorosPassed % 4 === 0 ? 'longBreak' : 'shortBreak';\n//       } else {\n//           nextCounter = 'pomodoro';\n//       }\n//       this.setState({\n//           currentCounter:nextCounter,\n//           currentCounterValue: this.state.counters[nextCounter].initValue,\n//           currentCounterInitValue: this.state.counters[nextCounter].initValue\n//       });\n//   }\n\n//   setCyclesPassed() {\n//       let pomodorosPassed = this.state.pomodorosPassed;\n//       if(this.state.currentCounter === 'pomodoro') {\n//           pomodorosPassed++;\n//           this.setState({pomodorosPassed: pomodorosPassed});\n//       }\n//   }\n\n//   render() {\n//       return(\n//           <div>\n//               <Front\n//                   is_visible={this.state.visibleComponent === 'front'}\n//                   setVisibleComponent={this.setVisibleComponent}\n//                   counterValue={this.state.currentCounterValue}\n//                   counterInitValue={this.state.currentCounterInitValue}\n//                   startCounter={this.startCounter}\n//                   resetCurrentCounter={this.resetCurrentCounter}\n//                   stopCounter={this.stopCounter}\n//                   isCountingDown={this.state.isCountingDown}\n//               />\n//               <Back\n//                   is_visible={this.state.visibleComponent === 'back'}\n//                   setVisibleComponent={this.setVisibleComponent}\n//                   counters={this.state.counters}\n//                   modifyCounterInitValue={this.modifyCounterInitValue}\n//               />\n//           </div>\n//       );\n//   }\n// }\n\n// class Back extends React.Component {\n\n//   renderSettingsElement(name, element) {\n//       return(\n//           <div className=\"settings-element\" key={name}>\n//               <h5>{element.name}</h5>\n//               <div>\n//                   <a href=\"#\"\n//                      className=\"setting-modify modify-up\"\n//                      onClick={() => this.props.modifyCounterInitValue(name, 60)}\n//                   >\n//                       &nbsp;\n//                   </a>\n//                   <span className=\"setting-value\">{formatTime(element.initValue)}</span>\n//                   <a href=\"#\"\n//                      className=\"setting-modify modify-down\"\n//                      onClick={() => this.props.modifyCounterInitValue(name, -60)}\n//                   >\n//                       &nbsp;\n//                   </a>\n//               </div>\n//           </div>\n//       );\n//   }\n\n//   render() {\n//       return(\n//           <div id=\"app-back\" className={this.props.is_visible ? 'active' : ''}>\n//               <span id=\"go-to-main-screen\" onClick={() => this.props.setVisibleComponent('front')}>&lt; back</span>\n//               <div id=\"settings-container\">\n//                   {Object.keys(this.props.counters).map((x) => {\n//                       return this.renderSettingsElement(x, this.props.counters[x]);\n//                   })}\n//               </div>\n//           </div>\n//       );\n//   }\n// }\n\n// class Front extends React.Component {\n\n//   render() {\n\n//       const degs = parseFloat(180 - (((this.props.counterValue * 100) / this.props.counterInitValue) * 180) / 100, 2);\n\n//       const fillStyles = {\n//           transform: `rotate(${degs}deg)`\n//       };\n\n//       const fixStyles = {\n//           transform: `rotate(${degs * 2}deg)`\n//       };\n\n//       return(\n//           <div id=\"app-front\" className={this.props.is_visible ? 'active' : ''}>\n//               <span id=\"go-to-settings\" onClick={() => this.props.setVisibleComponent('back')} className=\"fa fa-cog\">&nbsp;</span>\n//               <button id=\"start-stop\"\n//                       className=\"btn\"\n//                       onClick={() => this.props.isCountingDown ? this.props.stopCounter() : this.props.startCounter()}\n//               >\n//                   {this.props.isCountingDown ? 'pause' : 'start'}\n//               </button>\n//               <button id=\"reset\"\n//                       className=\"btn\"\n//                       onClick={() => this.props.resetCurrentCounter()}\n//               >\n//                   reset\n//               </button>\n//               <div id=\"main-counter\" className=\"radial-progress\">\n//                   <div className=\"circle\">\n//                       <div className=\"mask full\" style={fillStyles}>\n//                           <div className=\"fill\" style={fillStyles}>&nbsp;</div>\n//                       </div>\n//                       <div className=\"mask half\">\n//                           <div className=\"fill\" style={fillStyles}>&nbsp;</div>\n//                           <div className=\"fill fix\" style={fixStyles}>&nbsp;</div>\n//                       </div>\n//                       <div className=\"inset\">&nbsp;</div>\n//                       <div className=\"counter\">{formatTime(this.props.counterValue)}</div>\n//                   </div>\n//               </div>\n//           </div>\n\n//       );\n//   }\n// }\n\n// function formatTime(t) {\n//   let minutes = parseInt(t / 60, 0);\n//   let seconds = t % 60;\n//   seconds =  seconds < 10 ? '0' + seconds : seconds;\n//   minutes =  minutes < 10 ? '0' + minutes : minutes;\n//   return `${minutes}:${seconds}`;\n// }\n\nexport default PomodoroClock;"]},"metadata":{},"sourceType":"module"}